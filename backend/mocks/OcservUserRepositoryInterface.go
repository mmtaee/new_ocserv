// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	oc "ocserv/pkg/oc"

	mock "github.com/stretchr/testify/mock"

	request "ocserv/pkg/request"
)

// OcservUserRepositoryInterface is an autogenerated mock type for the OcservUserRepositoryInterface type
type OcservUserRepositoryInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *OcservUserRepositoryInterface) CreateUser(ctx context.Context, user *oc.OcservUser) (*oc.OcservUser, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *oc.OcservUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oc.OcservUser) (*oc.OcservUser, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oc.OcservUser) *oc.OcservUser); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oc.OcservUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oc.OcservUser) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *OcservUserRepositoryInterface) DeleteUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisconnectUser provides a mock function with given fields: ctx, username
func (_m *OcservUserRepositoryInterface) DisconnectUser(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *OcservUserRepositoryInterface) GetUserByID(ctx context.Context, userID string) (*oc.OcservUser, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *oc.OcservUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*oc.OcservUser, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *oc.OcservUser); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oc.OcservUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, pagination
func (_m *OcservUserRepositoryInterface) GetUsers(ctx context.Context, pagination *request.Pagination) (*[]oc.OcservUser, int64, error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 *[]oc.OcservUser
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination) (*[]oc.OcservUser, int64, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination) *[]oc.OcservUser); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]oc.OcservUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.Pagination) int64); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *request.Pagination) error); ok {
		r2 = rf(ctx, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUsersWithOnlineAttr provides a mock function with given fields: ctx, pagination
func (_m *OcservUserRepositoryInterface) GetUsersWithOnlineAttr(ctx context.Context, pagination *request.Pagination) (*[]oc.OcservUser, int64, error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersWithOnlineAttr")
	}

	var r0 *[]oc.OcservUser
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination) (*[]oc.OcservUser, int64, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination) *[]oc.OcservUser); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]oc.OcservUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.Pagination) int64); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *request.Pagination) error); ok {
		r2 = rf(ctx, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LockUser provides a mock function with given fields: ctx, userID, lock
func (_m *OcservUserRepositoryInterface) LockUser(ctx context.Context, userID string, lock bool) error {
	ret := _m.Called(ctx, userID, lock)

	if len(ret) == 0 {
		panic("no return value specified for LockUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, userID, lock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, ocUser
func (_m *OcservUserRepositoryInterface) UpdateUser(ctx context.Context, ocUser *oc.OcservUser) (*oc.OcservUser, error) {
	ret := _m.Called(ctx, ocUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *oc.OcservUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oc.OcservUser) (*oc.OcservUser, error)); ok {
		return rf(ctx, ocUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oc.OcservUser) *oc.OcservUser); ok {
		r0 = rf(ctx, ocUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oc.OcservUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oc.OcservUser) error); ok {
		r1 = rf(ctx, ocUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOcservUserRepositoryInterface creates a new instance of OcservUserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOcservUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OcservUserRepositoryInterface {
	mock := &OcservUserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
