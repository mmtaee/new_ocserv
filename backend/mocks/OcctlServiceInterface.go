// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	oc "ocserv/pkg/oc"

	mock "github.com/stretchr/testify/mock"
)

// OcctlServiceInterface is an autogenerated mock type for the OcctlServiceInterface type
type OcctlServiceInterface struct {
	mock.Mock
}

// DisconnectUser provides a mock function with given fields: username
func (_m *OcctlServiceInterface) DisconnectUser(username string) (string, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOnlineUsers provides a mock function with no fields
func (_m *OcctlServiceInterface) GetOnlineUsers() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOnlineUsers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithContext provides a mock function with given fields: ctx
func (_m *OcctlServiceInterface) WithContext(ctx context.Context) *oc.OcctlService {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 *oc.OcctlService
	if rf, ok := ret.Get(0).(func(context.Context) *oc.OcctlService); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oc.OcctlService)
		}
	}

	return r0
}

// NewOcctlServiceInterface creates a new instance of OcctlServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOcctlServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OcctlServiceInterface {
	mock := &OcctlServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
