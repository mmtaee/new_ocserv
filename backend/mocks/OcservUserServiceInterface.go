// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	oc "ocserv/pkg/oc"

	mock "github.com/stretchr/testify/mock"

	request "ocserv/pkg/request"
)

// OcservUserServiceInterface is an autogenerated mock type for the OcservUserServiceInterface type
type OcservUserServiceInterface struct {
	mock.Mock
}

// GetUsers provides a mock function with given fields: ctx, pagination
func (_m *OcservUserServiceInterface) GetUsers(ctx context.Context, pagination *request.Pagination) (*[]oc.OcservUser, int64, error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 *[]oc.OcservUser
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination) (*[]oc.OcservUser, int64, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination) *[]oc.OcservUser); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]oc.OcservUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.Pagination) int64); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *request.Pagination) error); ok {
		r2 = rf(ctx, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewOcservUserServiceInterface creates a new instance of OcservUserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOcservUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OcservUserServiceInterface {
	mock := &OcservUserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
