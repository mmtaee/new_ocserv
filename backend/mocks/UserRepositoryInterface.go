// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "ocserv/internal/models"

	mock "github.com/stretchr/testify/mock"

	request "ocserv/pkg/request"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: ctx, uid, currentPassword, newPassword
func (_m *UserRepositoryInterface) ChangePassword(ctx context.Context, uid string, currentPassword string, newPassword string) error {
	ret := _m.Called(ctx, uid, currentPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, uid, currentPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeStaffPassword provides a mock function with given fields: ctx, id, passwordHash, salt
func (_m *UserRepositoryInterface) ChangeStaffPassword(ctx context.Context, id uint, passwordHash string, salt string) error {
	ret := _m.Called(ctx, id, passwordHash, salt)

	if len(ret) == 0 {
		panic("no return value specified for ChangeStaffPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, string) error); ok {
		r0 = rf(ctx, id, passwordHash, salt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAdmin provides a mock function with given fields: ctx, user
func (_m *UserRepositoryInterface) CreateAdmin(ctx context.Context, user *models.User) (*models.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdmin")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (*models.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStaff provides a mock function with given fields: ctx, user
func (_m *UserRepositoryInterface) CreateStaff(ctx context.Context, user *models.User) (*models.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateStaff")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (*models.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserRepositoryInterface) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStaffs provides a mock function with given fields: ctx, pagination, filters
func (_m *UserRepositoryInterface) GetStaffs(ctx context.Context, pagination *request.Pagination, filters ...map[string]interface{}) (*[]models.User, int64, error) {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pagination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStaffs")
	}

	var r0 *[]models.User
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination, ...map[string]interface{}) (*[]models.User, int64, error)); ok {
		return rf(ctx, pagination, filters...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination, ...map[string]interface{}) *[]models.User); ok {
		r0 = rf(ctx, pagination, filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.Pagination, ...map[string]interface{}) int64); ok {
		r1 = rf(ctx, pagination, filters...)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *request.Pagination, ...map[string]interface{}) error); ok {
		r2 = rf(ctx, pagination, filters...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserById provides a mock function with given fields: ctx, uid
func (_m *UserRepositoryInterface) GetUserById(ctx context.Context, uid string) (*models.User, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepositoryInterface) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermission provides a mock function with given fields: ctx, id, perm
func (_m *UserRepositoryInterface) UpdatePermission(ctx context.Context, id uint, perm models.Permission) error {
	ret := _m.Called(ctx, id, perm)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, models.Permission) error); ok {
		r0 = rf(ctx, id, perm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
