// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TokenRepositoryInterface is an autogenerated mock type for the TokenRepositoryInterface type
type TokenRepositoryInterface struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: ctx, id, uid, rememberMe, isAdmin
func (_m *TokenRepositoryInterface) CreateToken(ctx context.Context, id uint, uid string, rememberMe bool, isAdmin bool) (string, error) {
	ret := _m.Called(ctx, id, uid, rememberMe, isAdmin)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, bool, bool) (string, error)); ok {
		return rf(ctx, id, uid, rememberMe, isAdmin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, bool, bool) string); ok {
		r0 = rf(ctx, id, uid, rememberMe, isAdmin)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, string, bool, bool) error); ok {
		r1 = rf(ctx, id, uid, rememberMe, isAdmin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenRepositoryInterface creates a new instance of TokenRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRepositoryInterface {
	mock := &TokenRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
