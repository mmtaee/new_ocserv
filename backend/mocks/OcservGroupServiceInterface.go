// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	oc "ocserv/pkg/oc"

	mock "github.com/stretchr/testify/mock"
)

// OcservGroupServiceInterface is an autogenerated mock type for the OcservGroupServiceInterface type
type OcservGroupServiceInterface struct {
	mock.Mock
}

// CreateOrUpdateGroup provides a mock function with given fields: name, group
func (_m *OcservGroupServiceInterface) CreateOrUpdateGroup(name string, group *oc.OcservDefaultConfigs) error {
	ret := _m.Called(name, group)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *oc.OcservDefaultConfigs) error); ok {
		r0 = rf(name, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: name
func (_m *OcservGroupServiceInterface) Delete(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroup provides a mock function with given fields: name
func (_m *OcservGroupServiceInterface) GetGroup(name string) (*oc.OcservDefaultConfigs, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *oc.OcservDefaultConfigs
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*oc.OcservDefaultConfigs, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *oc.OcservDefaultConfigs); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oc.OcservDefaultConfigs)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupNames provides a mock function with no fields
func (_m *OcservGroupServiceInterface) GetGroupNames() (*[]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGroupNames")
	}

	var r0 *[]string
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroups provides a mock function with no fields
func (_m *OcservGroupServiceInterface) GetGroups() (*[]oc.GroupInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGroups")
	}

	var r0 *[]oc.GroupInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]oc.GroupInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]oc.GroupInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]oc.GroupInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDefaultGroup provides a mock function with given fields: group
func (_m *OcservGroupServiceInterface) UpdateDefaultGroup(group *oc.OcservDefaultConfigs) error {
	ret := _m.Called(group)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDefaultGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*oc.OcservDefaultConfigs) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithContext provides a mock function with given fields: ctx
func (_m *OcservGroupServiceInterface) WithContext(ctx context.Context) *oc.OcservGroupService {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 *oc.OcservGroupService
	if rf, ok := ret.Get(0).(func(context.Context) *oc.OcservGroupService); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oc.OcservGroupService)
		}
	}

	return r0
}

// NewOcservGroupServiceInterface creates a new instance of OcservGroupServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOcservGroupServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OcservGroupServiceInterface {
	mock := &OcservGroupServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
