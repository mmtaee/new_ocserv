// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "ocserv/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// PanelRepositoryInterface is an autogenerated mock type for the PanelRepositoryInterface type
type PanelRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, panel
func (_m *PanelRepositoryInterface) Create(ctx context.Context, panel *models.Panel) (*models.Panel, error) {
	ret := _m.Called(ctx, panel)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Panel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Panel) (*models.Panel, error)); ok {
		return rf(ctx, panel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Panel) *models.Panel); ok {
		r0 = rf(ctx, panel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Panel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Panel) error); ok {
		r1 = rf(ctx, panel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: ctx
func (_m *PanelRepositoryInterface) GetConfig(ctx context.Context) (*models.Panel, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *models.Panel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.Panel, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.Panel); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Panel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, panel
func (_m *PanelRepositoryInterface) Update(ctx context.Context, panel *models.Panel) (*models.Panel, error) {
	ret := _m.Called(ctx, panel)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Panel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Panel) (*models.Panel, error)); ok {
		return rf(ctx, panel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Panel) *models.Panel); ok {
		r0 = rf(ctx, panel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Panel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Panel) error); ok {
		r1 = rf(ctx, panel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPanelRepositoryInterface creates a new instance of PanelRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPanelRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PanelRepositoryInterface {
	mock := &PanelRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
