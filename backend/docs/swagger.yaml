basePath: /api
definitions:
  middlewares.PermissionDenied:
    properties:
      error:
        type: string
    type: object
  middlewares.Unauthorized:
    properties:
      error:
        type: string
    type: object
  models.Permission:
    properties:
      oc_groups:
        type: boolean
      oc_users:
        type: boolean
      occtl:
        type: boolean
      see_server_logs:
        type: boolean
      statistic:
        type: boolean
      system:
        type: boolean
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      last_login:
        type: string
      permission:
        $ref: '#/definitions/models.Permission'
      uid:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    required:
    - id
    - is_admin
    - last_login
    - permission
    - uid
    - username
    type: object
  oc.OcservDefaultConfigs:
    properties:
      cgroup:
        type: string
      deny-roaming:
        type: boolean
      dns:
        items:
          type: string
        type: array
      dpd:
        type: integer
      explicit-ipv4:
        type: string
      idle-timeout:
        type: integer
      ipv4-network:
        type: string
      iroute:
        type: string
      keepalive:
        type: integer
      max-same-clients:
        type: integer
      mobile-dpd:
        type: integer
      mobile-idle-timeout:
        type: integer
      mtu:
        type: integer
      nbns:
        type: string
      net-priority:
        type: integer
      no-route:
        items:
          type: string
        type: array
      no-udp:
        type: boolean
      restrict-user-to-ports:
        type: string
      restrict-user-to-routes:
        type: boolean
      route:
        items:
          type: string
        type: array
      rx-data-per-sec:
        type: integer
      session-timeout:
        type: integer
      split-dns:
        items:
          type: string
        type: array
      stats-report-time:
        type: integer
      tunnel-all-dns:
        type: boolean
      tx-data-per-sec:
        type: integer
    type: object
  oc.OcservUser:
    properties:
      created_at:
        type: string
      deactivated_at:
        type: string
      description:
        type: string
      expire_at:
        type: string
      group:
        type: string
      is_locked:
        type: boolean
      is_online:
        type: boolean
      password:
        type: string
      rx:
        description: Receive in bytes
        type: integer
      traffic_size:
        description: in GiB  >> x * 1024 ** 3
        type: integer
      traffic_type:
        enum:
        - Free
        - MonthlyTransmit
        - MonthlyReceive
        - TotallyTransmit
        - TotallyReceive
        type: string
      tx:
        description: Transmit in bytes
        type: integer
      uid:
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - created_at
    - group
    - is_locked
    - is_online
    - password
    - rx
    - traffic_size
    - traffic_type
    - tx
    - uid
    - username
    type: object
  ocservUser.LockOcservUserData:
    properties:
      lock:
        example: false
        type: boolean
    required:
    - lock
    type: object
  ocservUser.OcservUsersResponse:
    properties:
      meta:
        $ref: '#/definitions/request.Meta'
      result:
        items:
          $ref: '#/definitions/oc.OcservUser'
        type: array
    required:
    - meta
    type: object
  ocservUser.UpdateOcservUserData:
    properties:
      description:
        example: User for testing VPN access
        maxLength: 1024
        type: string
      group:
        example: default
        type: string
      password:
        example: strongpassword123
        minLength: 6
        type: string
      traffic_size:
        description: 10 GiB
        example: 10737418240
        type: integer
      traffic_type:
        enum:
        - Free
        - MonthlyTransmit
        - MonthlyReceive
        - TotallyTransmit
        - TotallyReceive
        example: MonthlyTransmit
        type: string
    type: object
  ocservUser.createOcservUserData:
    properties:
      description:
        example: User for testing VPN access
        maxLength: 1024
        type: string
      expire_at:
        example: "2025-12-31"
        type: string
      group:
        example: default
        type: string
      password:
        example: strongpassword123
        minLength: 6
        type: string
      traffic_size:
        description: 10 GiB
        example: 10737418240
        type: integer
      traffic_type:
        enum:
        - Free
        - MonthlyTransmit
        - MonthlyReceive
        - TotallyTransmit
        - TotallyReceive
        example: MonthlyTransmit
        type: string
      username:
        example: john_doe
        maxLength: 32
        minLength: 3
        type: string
    required:
    - group
    - password
    - traffic_size
    - traffic_type
    - username
    type: object
  panel.ConfigData:
    properties:
      google_captcha_secret_key:
        type: string
      google_captcha_site_key:
        type: string
    type: object
  panel.ConfigResponse:
    properties:
      google_captcha_secret_key:
        type: string
      google_captcha_site_key:
        type: string
    type: object
  panel.InitResponse:
    properties:
      google_captcha_site_key:
        type: string
      setup:
        type: boolean
    required:
    - setup
    type: object
  panel.LoginData:
    properties:
      password:
        example: doe123456
        maxLength: 16
        minLength: 2
        type: string
      remember_me:
        type: boolean
      token:
        type: string
      username:
        example: john_doe
        maxLength: 16
        minLength: 2
        type: string
    required:
    - password
    - username
    type: object
  panel.SetupData:
    properties:
      admin:
        properties:
          password:
            example: doe123456
            maxLength: 16
            minLength: 2
            type: string
          username:
            example: john_doe
            maxLength: 16
            minLength: 2
            type: string
        required:
        - password
        - username
        type: object
      config:
        properties:
          google_captcha_secret_key:
            type: string
          google_captcha_site_key:
            type: string
        required:
        - google_captcha_secret_key
        - google_captcha_site_key
        type: object
      default_ocserv_group:
        $ref: '#/definitions/oc.OcservDefaultConfigs'
    required:
    - admin
    - default_ocserv_group
    type: object
  panel.UserResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    required:
    - token
    - user
    type: object
  request.ErrorResponse:
    properties:
      error:
        items:
          type: string
        type: array
      message:
        items:
          type: string
        type: array
    required:
    - error
    - message
    type: object
  request.Meta:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total_records:
        type: integer
    required:
    - page
    - page_size
    - total_records
    type: object
  user.ChangePasswordData:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    required:
    - current_password
    - new_password
    type: object
  user.ChangeStaffPassword:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  user.CreateStaffData:
    properties:
      password:
        type: string
      permission:
        $ref: '#/definitions/models.Permission'
      username:
        type: string
    required:
    - password
    - permission
    - username
    type: object
  user.StaffsResponse:
    properties:
      meta:
        $ref: '#/definitions/request.Meta'
      result:
        items:
          $ref: '#/definitions/models.User'
        type: array
    required:
    - meta
    type: object
info:
  contact: {}
  description: This is a sample Ocserv User management Api server.
  title: Ocserv User management Example Api
  version: "1.0"
paths:
  /oc_users:
    get:
      consumes:
      - application/json
      description: List of Ocserv Users
      parameters:
      - description: Page number, starting from 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Field to order by
        in: query
        name: order
        type: string
      - description: Sort order, either ASC or DESC
        enum:
        - ASC
        - DESC
        in: query
        name: sort
        type: string
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ocservUser.OcservUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: List of Ocserv Users
      tags:
      - Ocserv Users
    post:
      consumes:
      - application/json
      description: Create Ocserv Users
      parameters:
      - description: create ocserv user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ocservUser.createOcservUserData'
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oc.OcservUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Create Ocserv Users
      tags:
      - Ocserv Users
  /oc_users/{uid}:
    delete:
      consumes:
      - application/json
      description: Ocserv User delete
      parameters:
      - description: Ocserv User UID
        in: path
        name: uid
        required: true
        type: string
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Ocserv User delete
      tags:
      - Ocserv Users
    patch:
      consumes:
      - application/json
      description: Ocserv User update
      parameters:
      - description: Ocserv User UID
        in: path
        name: uid
        required: true
        type: string
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: update ocserv user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ocservUser.UpdateOcservUserData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oc.OcservUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Ocserv User update
      tags:
      - Ocserv Users
  /oc_users/{uid}/lock:
    post:
      consumes:
      - application/json
      description: Lock Or Unlock Ocserv Users
      parameters:
      - description: Ocserv User UID
        in: path
        name: uid
        required: true
        type: string
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: lock or unlock ocserv user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ocservUser.LockOcservUserData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Lock Or Unlock Ocserv Users
      tags:
      - Ocserv Users
  /oc_users/{username}/disconnect:
    post:
      consumes:
      - application/json
      description: Ocserv Users disconnect
      parameters:
      - description: Ocserv User UID
        in: path
        name: uid
        required: true
        type: string
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Ocserv Users disconnect
      tags:
      - Ocserv Users
  /panel/config:
    get:
      consumes:
      - application/json
      description: Get panel Config
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/panel.ConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Get panel Config
      tags:
      - Panel
    patch:
      consumes:
      - application/json
      description: Update Config panel
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: update config data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/panel.ConfigData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/panel.ConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Update Config panel
      tags:
      - Panel
  /panel/init:
    get:
      consumes:
      - application/json
      description: Get panel Init Config
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/panel.InitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
      summary: Get panel Init Config
      tags:
      - Panel
  /panel/login/:
    post:
      consumes:
      - application/json
      description: Admin and Staff users login with Google captcha(captcha site key
        required in get config api)
      parameters:
      - description: setup config data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/panel.LoginData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/panel.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
      summary: Admin and Staff users login
      tags:
      - Panel
  /panel/setup/:
    post:
      consumes:
      - application/json
      description: Setup panel with admin user, captcha and ocserv default group configs
      parameters:
      - description: setup config data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/panel.SetupData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/panel.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
      summary: Setup panel with admin user
      tags:
      - Panel
  /user/password:
    post:
      consumes:
      - application/json
      description: User Change Password
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: change user password data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ChangePasswordData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: User Change Password
      tags:
      - User
  /user/profile:
    get:
      consumes:
      - application/json
      description: Get user Profile
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Get user Profile
      tags:
      - User
  /user/staffs:
    get:
      consumes:
      - application/json
      description: List of Staffs
      parameters:
      - description: Page number, starting from 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Field to order by
        in: query
        name: order
        type: string
      - description: Sort order, either ASC or DESC
        enum:
        - ASC
        - DESC
        in: query
        name: sort
        type: string
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.StaffsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: List of Staffs
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create Admin or Staff
      parameters:
      - description: user create data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateStaffData'
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Create Admin or Staff
      tags:
      - User
  /user/staffs/${id}/:
    delete:
      consumes:
      - application/json
      description: Remove Staff by given id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Remove Staff
      tags:
      - User
  /user/staffs/{id}/password:
    post:
      consumes:
      - application/json
      description: Change Staff Password by given id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: user new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ChangeStaffPassword'
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Change Staff Password
      tags:
      - User
  /user/staffs/permissions/${id}/:
    put:
      consumes:
      - application/json
      description: Update Staff Permission by given id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: user permission
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Permission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Update Staff Permission
      tags:
      - User
swagger: "2.0"
