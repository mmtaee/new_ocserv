basePath: /api
definitions:
  models.Permission:
    properties:
      oc_group:
        type: boolean
      oc_user:
        type: boolean
      occtl:
        type: boolean
      see_server_log:
        type: boolean
      statistic:
        type: boolean
      system:
        type: boolean
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      last_login:
        type: string
      permission:
        $ref: '#/definitions/models.Permission'
      uid:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    required:
    - id
    - is_admin
    - last_login
    - permission
    - uid
    - username
    type: object
  oc.OcservDefaultConfigs:
    properties:
      cgroup:
        type: string
      deny-roaming:
        type: boolean
      dns:
        items:
          type: string
        type: array
      dpd:
        type: integer
      explicit-ipv4:
        type: string
      idle-timeout:
        type: integer
      ipv4-network:
        type: string
      iroute:
        type: string
      keepalive:
        type: integer
      max-same-clients:
        type: integer
      mobile-dpd:
        type: integer
      mobile-idle-timeout:
        type: integer
      mtu:
        type: integer
      nbns:
        type: string
      net-priority:
        type: integer
      no-route:
        items:
          type: string
        type: array
      no-udp:
        type: boolean
      restrict-user-to-ports:
        type: string
      restrict-user-to-routes:
        type: boolean
      route:
        items:
          type: string
        type: array
      rx-data-per-sec:
        type: integer
      session-timeout:
        type: integer
      split-dns:
        items:
          type: string
        type: array
      stats-report-time:
        type: integer
      tunnel-all-dns:
        type: boolean
      tx-data-per-sec:
        type: integer
    type: object
  panel.ConfigData:
    properties:
      google_captcha_secret_key:
        type: string
      google_captcha_site_key:
        type: string
    type: object
  panel.ConfigResponse:
    properties:
      google_captcha_secret_key:
        type: string
      google_captcha_site_key:
        type: string
    type: object
  panel.InitResponse:
    properties:
      google_captcha_site_key:
        type: string
      setup:
        type: boolean
    required:
    - setup
    type: object
  panel.LoginData:
    properties:
      password:
        example: doe123456
        maxLength: 16
        minLength: 2
        type: string
      remember_me:
        type: boolean
      token:
        type: string
      username:
        example: john_doe
        maxLength: 16
        minLength: 2
        type: string
    required:
    - password
    - username
    type: object
  panel.SetupData:
    properties:
      admin:
        properties:
          password:
            example: doe123456
            maxLength: 16
            minLength: 2
            type: string
          username:
            example: john_doe
            maxLength: 16
            minLength: 2
            type: string
        required:
        - password
        - username
        type: object
      config:
        properties:
          google_captcha_secret_key:
            type: string
          google_captcha_site_key:
            type: string
        required:
        - google_captcha_secret_key
        - google_captcha_site_key
        type: object
      default_ocserv_group:
        $ref: '#/definitions/oc.OcservDefaultConfigs'
    required:
    - admin
    - default_ocserv_group
    type: object
  panel.UserResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    required:
    - token
    - user
    type: object
  request.Meta:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total_records:
        type: integer
    required:
    - page
    - page_size
    type: object
  user.ChangePasswordData:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    required:
    - current_password
    - new_password
    type: object
  user.ChangeStaffPassword:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  user.CreateStaffData:
    properties:
      password:
        type: string
      permission:
        $ref: '#/definitions/models.Permission'
      username:
        type: string
    required:
    - password
    - permission
    - username
    type: object
  user.StaffsResponse:
    properties:
      meta:
        $ref: '#/definitions/request.Meta'
      result:
        items:
          $ref: '#/definitions/models.User'
        type: array
    required:
    - meta
    type: object
info:
  contact: {}
  description: This is a sample Ocserv User management Api server.
  title: Ocserv User management Example Api
  version: "1.0"
paths:
  /panel/config:
    get:
      consumes:
      - application/json
      description: Get panel Config
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/panel.ConfigResponse'
      summary: Get panel Config
      tags:
      - Panel
    patch:
      consumes:
      - application/json
      description: Update Config panel
      parameters:
      - description: update config data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/panel.ConfigData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/panel.ConfigResponse'
      summary: Update Config panel
      tags:
      - Panel
  /panel/init:
    get:
      consumes:
      - application/json
      description: Get panel Init Config
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/panel.InitResponse'
      summary: Get panel Init Config
      tags:
      - Panel
  /panel/login/:
    post:
      consumes:
      - application/json
      description: Admin and Staff users login with Google captcha(captcha site key
        required in get config api)
      parameters:
      - description: setup config data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/panel.LoginData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/panel.UserResponse'
      summary: Admin and Staff users login
      tags:
      - Panel
  /panel/setup/:
    post:
      consumes:
      - application/json
      description: Setup panel with admin user, captcha and ocserv default group configs
      parameters:
      - description: setup config data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/panel.SetupData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/panel.UserResponse'
      summary: Setup panel with admin user
      tags:
      - Panel
  /user/password:
    post:
      consumes:
      - application/json
      description: User Change Password
      parameters:
      - description: change user password data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ChangePasswordData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: User Change Password
      tags:
      - User
  /user/profile:
    get:
      consumes:
      - application/json
      description: Get user Profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user Profile
      tags:
      - User
  /user/staffs:
    get:
      consumes:
      - application/json
      description: List os Staffs
      parameters:
      - description: Page number, starting from 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Field to order by
        in: query
        name: order
        type: string
      - description: Sort order, either ASC or DESC
        enum:
        - ASC
        - DESC
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.StaffsResponse'
      summary: List os Staffs
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create Admin or Staff
      parameters:
      - description: user create data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateStaffData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Create Admin or Staff
      tags:
      - User
  /user/staffs/${id}/:
    delete:
      consumes:
      - application/json
      description: Remove Staff by given id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Remove Staff
      tags:
      - User
  /user/staffs/{id}/password:
    post:
      consumes:
      - application/json
      description: Change Staff Password by given id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: user new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ChangeStaffPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Change Staff Password
      tags:
      - User
  /user/staffs/permissions/${id}/:
    put:
      consumes:
      - application/json
      description: Update Staff Permission by given id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: user permission
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Permission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Update Staff Permission
      tags:
      - User
swagger: "2.0"
