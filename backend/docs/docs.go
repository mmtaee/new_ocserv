// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/panel/setup/": {
            "post": {
                "description": "Setup panel with admin user and",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Panel"
                ],
                "summary": "Setup panel with admin user",
                "parameters": [
                    {
                        "description": "setup config data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/setup.RequestSetup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/setup.ResponseSetup"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.OcservUserOrGroupConfigs": {
            "type": "object",
            "properties": {
                "cgroup": {
                    "type": "string"
                },
                "deny-roaming": {
                    "type": "boolean"
                },
                "dns": {
                    "type": "string"
                },
                "dpd": {
                    "type": "integer"
                },
                "explicit-ipv4": {
                    "type": "string"
                },
                "idle-timeout": {
                    "type": "integer"
                },
                "ipv4-netmask": {
                    "type": "string"
                },
                "iroute": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "keepalive": {
                    "type": "integer"
                },
                "max-same-clients": {
                    "type": "integer"
                },
                "mobile-dpd": {
                    "type": "integer"
                },
                "mobile-idle-timeout": {
                    "type": "integer"
                },
                "mtu": {
                    "type": "integer"
                },
                "nbns": {
                    "type": "string"
                },
                "net-priority": {
                    "type": "integer"
                },
                "no-route": {
                    "type": "string"
                },
                "no-udp": {
                    "type": "boolean"
                },
                "restrict-user-to-ports": {
                    "type": "string"
                },
                "restrict-user-to-routes": {
                    "type": "boolean"
                },
                "route": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rx-data-per-sec": {
                    "type": "string"
                },
                "session-timeout": {
                    "type": "integer"
                },
                "split-dns": {
                    "type": "string"
                },
                "stats-report-time": {
                    "type": "integer"
                },
                "tunnel-all-dns": {
                    "type": "boolean"
                },
                "tx-data-per-sec": {
                    "type": "string"
                }
            }
        },
        "models.Permission": {
            "type": "object",
            "properties": {
                "oc_group": {
                    "type": "boolean"
                },
                "oc_user": {
                    "type": "boolean"
                },
                "occtl": {
                    "type": "boolean"
                },
                "see_server_log": {
                    "type": "boolean"
                },
                "statistic": {
                    "type": "boolean"
                },
                "system": {
                    "type": "boolean"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "last_login": {
                    "type": "string"
                },
                "permission": {
                    "$ref": "#/definitions/models.Permission"
                },
                "uid": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "setup.RequestSetup": {
            "type": "object",
            "required": [
                "config",
                "default_ocserv_group"
            ],
            "properties": {
                "config": {
                    "type": "object",
                    "required": [
                        "admin_password",
                        "admin_username"
                    ],
                    "properties": {
                        "admin_password": {
                            "type": "string",
                            "maxLength": 16,
                            "minLength": 2,
                            "example": "doe123456"
                        },
                        "admin_username": {
                            "type": "string",
                            "maxLength": 16,
                            "minLength": 2,
                            "example": "john_doe"
                        },
                        "google_captcha_secret_key": {
                            "type": "string"
                        },
                        "google_captcha_site_key": {
                            "type": "string"
                        }
                    }
                },
                "default_ocserv_group": {
                    "$ref": "#/definitions/models.OcservUserOrGroupConfigs"
                }
            }
        },
        "setup.ResponseSetup": {
            "type": "object",
            "required": [
                "token",
                "user"
            ],
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Ocserv User management Example Api",
	Description:      "This is a sample Ocserv User management Api server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
