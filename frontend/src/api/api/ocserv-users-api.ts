/* tslint:disable */
/* eslint-disable */
/**
 * Ocserv User management Example Api
 * This is a sample Ocserv User management Api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MiddlewaresPermissionDenied } from '../models';
// @ts-ignore
import type { MiddlewaresUnauthorized } from '../models';
// @ts-ignore
import type { OcOcservUser } from '../models';
// @ts-ignore
import type { OcservUserCreateOcservUserData } from '../models';
// @ts-ignore
import type { OcservUserLockOcservUserData } from '../models';
// @ts-ignore
import type { OcservUserOcservUsersResponse } from '../models';
// @ts-ignore
import type { OcservUserUpdateOcservUserData } from '../models';
// @ts-ignore
import type { RequestErrorResponse } from '../models';
/**
 * OcservUsersApi - axios parameter creator
 * @export
 */
export const OcservUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List of Ocserv Users
         * @summary List of Ocserv Users
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [pageSize] Number of items per page
         * @param {string} [order] Field to order by
         * @param {OcUsersGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersGet: async (authorization: string, page?: number, pageSize?: number, order?: string, sort?: OcUsersGetSortEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocUsersGet', 'authorization', authorization)
            const localVarPath = `/oc_users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Ocserv Users
         * @summary Create Ocserv Users
         * @param {string} authorization Bearer TOKEN
         * @param {OcservUserCreateOcservUserData} request create ocserv user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersPost: async (authorization: string, request: OcservUserCreateOcservUserData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocUsersPost', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('ocUsersPost', 'request', request)
            const localVarPath = `/oc_users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv User delete
         * @summary Ocserv User delete
         * @param {string} uid Ocserv User UID
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersUidDelete: async (uid: string, authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('ocUsersUidDelete', 'uid', uid)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocUsersUidDelete', 'authorization', authorization)
            const localVarPath = `/oc_users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lock Or Unlock Ocserv Users
         * @summary Lock Or Unlock Ocserv Users
         * @param {string} uid Ocserv User UID
         * @param {string} authorization Bearer TOKEN
         * @param {OcservUserLockOcservUserData} request lock or unlock ocserv user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersUidLockPost: async (uid: string, authorization: string, request: OcservUserLockOcservUserData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('ocUsersUidLockPost', 'uid', uid)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocUsersUidLockPost', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('ocUsersUidLockPost', 'request', request)
            const localVarPath = `/oc_users/{uid}/lock`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv User update
         * @summary Ocserv User update
         * @param {string} uid Ocserv User UID
         * @param {string} authorization Bearer TOKEN
         * @param {OcservUserUpdateOcservUserData} request update ocserv user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersUidPatch: async (uid: string, authorization: string, request: OcservUserUpdateOcservUserData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('ocUsersUidPatch', 'uid', uid)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocUsersUidPatch', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('ocUsersUidPatch', 'request', request)
            const localVarPath = `/oc_users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv Users disconnect
         * @summary Ocserv Users disconnect
         * @param {string} username Ocserv Username
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersUsernameDisconnectPost: async (username: string, authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('ocUsersUsernameDisconnectPost', 'username', username)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocUsersUsernameDisconnectPost', 'authorization', authorization)
            const localVarPath = `/oc_users/{username}/disconnect`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OcservUsersApi - functional programming interface
 * @export
 */
export const OcservUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OcservUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * List of Ocserv Users
         * @summary List of Ocserv Users
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [pageSize] Number of items per page
         * @param {string} [order] Field to order by
         * @param {OcUsersGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocUsersGet(authorization: string, page?: number, pageSize?: number, order?: string, sort?: OcUsersGetSortEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcservUserOcservUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocUsersGet(authorization, page, pageSize, order, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create Ocserv Users
         * @summary Create Ocserv Users
         * @param {string} authorization Bearer TOKEN
         * @param {OcservUserCreateOcservUserData} request create ocserv user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocUsersPost(authorization: string, request: OcservUserCreateOcservUserData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcOcservUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocUsersPost(authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv User delete
         * @summary Ocserv User delete
         * @param {string} uid Ocserv User UID
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocUsersUidDelete(uid: string, authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocUsersUidDelete(uid, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocUsersUidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lock Or Unlock Ocserv Users
         * @summary Lock Or Unlock Ocserv Users
         * @param {string} uid Ocserv User UID
         * @param {string} authorization Bearer TOKEN
         * @param {OcservUserLockOcservUserData} request lock or unlock ocserv user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocUsersUidLockPost(uid: string, authorization: string, request: OcservUserLockOcservUserData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocUsersUidLockPost(uid, authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocUsersUidLockPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv User update
         * @summary Ocserv User update
         * @param {string} uid Ocserv User UID
         * @param {string} authorization Bearer TOKEN
         * @param {OcservUserUpdateOcservUserData} request update ocserv user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocUsersUidPatch(uid: string, authorization: string, request: OcservUserUpdateOcservUserData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcOcservUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocUsersUidPatch(uid, authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocUsersUidPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv Users disconnect
         * @summary Ocserv Users disconnect
         * @param {string} username Ocserv Username
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocUsersUsernameDisconnectPost(username: string, authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocUsersUsernameDisconnectPost(username, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocUsersUsernameDisconnectPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OcservUsersApi - factory interface
 * @export
 */
export const OcservUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OcservUsersApiFp(configuration)
    return {
        /**
         * List of Ocserv Users
         * @summary List of Ocserv Users
         * @param {OcservUsersApiOcUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersGet(requestParameters: OcservUsersApiOcUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<OcservUserOcservUsersResponse> {
            return localVarFp.ocUsersGet(requestParameters.authorization, requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Ocserv Users
         * @summary Create Ocserv Users
         * @param {OcservUsersApiOcUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersPost(requestParameters: OcservUsersApiOcUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<OcOcservUser> {
            return localVarFp.ocUsersPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv User delete
         * @summary Ocserv User delete
         * @param {OcservUsersApiOcUsersUidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersUidDelete(requestParameters: OcservUsersApiOcUsersUidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ocUsersUidDelete(requestParameters.uid, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Lock Or Unlock Ocserv Users
         * @summary Lock Or Unlock Ocserv Users
         * @param {OcservUsersApiOcUsersUidLockPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersUidLockPost(requestParameters: OcservUsersApiOcUsersUidLockPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ocUsersUidLockPost(requestParameters.uid, requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv User update
         * @summary Ocserv User update
         * @param {OcservUsersApiOcUsersUidPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersUidPatch(requestParameters: OcservUsersApiOcUsersUidPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<OcOcservUser> {
            return localVarFp.ocUsersUidPatch(requestParameters.uid, requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv Users disconnect
         * @summary Ocserv Users disconnect
         * @param {OcservUsersApiOcUsersUsernameDisconnectPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocUsersUsernameDisconnectPost(requestParameters: OcservUsersApiOcUsersUsernameDisconnectPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ocUsersUsernameDisconnectPost(requestParameters.username, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ocUsersGet operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcUsersGetRequest
 */
export interface OcservUsersApiOcUsersGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcUsersGet
     */
    readonly authorization: string

    /**
     * Page number, starting from 1
     * @type {number}
     * @memberof OcservUsersApiOcUsersGet
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof OcservUsersApiOcUsersGet
     */
    readonly pageSize?: number

    /**
     * Field to order by
     * @type {string}
     * @memberof OcservUsersApiOcUsersGet
     */
    readonly order?: string

    /**
     * Sort order, either ASC or DESC
     * @type {'ASC' | 'DESC'}
     * @memberof OcservUsersApiOcUsersGet
     */
    readonly sort?: OcUsersGetSortEnum
}

/**
 * Request parameters for ocUsersPost operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcUsersPostRequest
 */
export interface OcservUsersApiOcUsersPostRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcUsersPost
     */
    readonly authorization: string

    /**
     * create ocserv user data
     * @type {OcservUserCreateOcservUserData}
     * @memberof OcservUsersApiOcUsersPost
     */
    readonly request: OcservUserCreateOcservUserData
}

/**
 * Request parameters for ocUsersUidDelete operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcUsersUidDeleteRequest
 */
export interface OcservUsersApiOcUsersUidDeleteRequest {
    /**
     * Ocserv User UID
     * @type {string}
     * @memberof OcservUsersApiOcUsersUidDelete
     */
    readonly uid: string

    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcUsersUidDelete
     */
    readonly authorization: string
}

/**
 * Request parameters for ocUsersUidLockPost operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcUsersUidLockPostRequest
 */
export interface OcservUsersApiOcUsersUidLockPostRequest {
    /**
     * Ocserv User UID
     * @type {string}
     * @memberof OcservUsersApiOcUsersUidLockPost
     */
    readonly uid: string

    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcUsersUidLockPost
     */
    readonly authorization: string

    /**
     * lock or unlock ocserv user data
     * @type {OcservUserLockOcservUserData}
     * @memberof OcservUsersApiOcUsersUidLockPost
     */
    readonly request: OcservUserLockOcservUserData
}

/**
 * Request parameters for ocUsersUidPatch operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcUsersUidPatchRequest
 */
export interface OcservUsersApiOcUsersUidPatchRequest {
    /**
     * Ocserv User UID
     * @type {string}
     * @memberof OcservUsersApiOcUsersUidPatch
     */
    readonly uid: string

    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcUsersUidPatch
     */
    readonly authorization: string

    /**
     * update ocserv user data
     * @type {OcservUserUpdateOcservUserData}
     * @memberof OcservUsersApiOcUsersUidPatch
     */
    readonly request: OcservUserUpdateOcservUserData
}

/**
 * Request parameters for ocUsersUsernameDisconnectPost operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcUsersUsernameDisconnectPostRequest
 */
export interface OcservUsersApiOcUsersUsernameDisconnectPostRequest {
    /**
     * Ocserv Username
     * @type {string}
     * @memberof OcservUsersApiOcUsersUsernameDisconnectPost
     */
    readonly username: string

    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcUsersUsernameDisconnectPost
     */
    readonly authorization: string
}

/**
 * OcservUsersApi - object-oriented interface
 * @export
 * @class OcservUsersApi
 * @extends {BaseAPI}
 */
export class OcservUsersApi extends BaseAPI {
    /**
     * List of Ocserv Users
     * @summary List of Ocserv Users
     * @param {OcservUsersApiOcUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocUsersGet(requestParameters: OcservUsersApiOcUsersGetRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocUsersGet(requestParameters.authorization, requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Ocserv Users
     * @summary Create Ocserv Users
     * @param {OcservUsersApiOcUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocUsersPost(requestParameters: OcservUsersApiOcUsersPostRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocUsersPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv User delete
     * @summary Ocserv User delete
     * @param {OcservUsersApiOcUsersUidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocUsersUidDelete(requestParameters: OcservUsersApiOcUsersUidDeleteRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocUsersUidDelete(requestParameters.uid, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lock Or Unlock Ocserv Users
     * @summary Lock Or Unlock Ocserv Users
     * @param {OcservUsersApiOcUsersUidLockPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocUsersUidLockPost(requestParameters: OcservUsersApiOcUsersUidLockPostRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocUsersUidLockPost(requestParameters.uid, requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv User update
     * @summary Ocserv User update
     * @param {OcservUsersApiOcUsersUidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocUsersUidPatch(requestParameters: OcservUsersApiOcUsersUidPatchRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocUsersUidPatch(requestParameters.uid, requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv Users disconnect
     * @summary Ocserv Users disconnect
     * @param {OcservUsersApiOcUsersUsernameDisconnectPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocUsersUsernameDisconnectPost(requestParameters: OcservUsersApiOcUsersUsernameDisconnectPostRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocUsersUsernameDisconnectPost(requestParameters.username, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const OcUsersGetSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type OcUsersGetSortEnum = typeof OcUsersGetSortEnum[keyof typeof OcUsersGetSortEnum];
