/* tslint:disable */
/* eslint-disable */
/**
 * Ocserv User management Example Api
 * This is a sample Ocserv User management Api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PanelConfigResponse } from '../models';
// @ts-ignore
import type { PanelLogin } from '../models';
// @ts-ignore
import type { PanelSetupData } from '../models';
// @ts-ignore
import type { PanelUserResponse } from '../models';
/**
 * PanelApi - axios parameter creator
 * @export
 */
export const PanelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get panel Config
         * @summary Get panel Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panelGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/panel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Admin and Staff users login with Google captcha(captcha site key required in get config api)
         * @summary Admin and Staff users login
         * @param {PanelLogin} request setup config data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panelLoginPost: async (request: PanelLogin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('panelLoginPost', 'request', request)
            const localVarPath = `/panel/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Setup panel with admin user, captcha and ocserv default group configs
         * @summary Setup panel with admin user
         * @param {PanelSetupData} request setup config data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panelSetupPost: async (request: PanelSetupData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('panelSetupPost', 'request', request)
            const localVarPath = `/panel/setup/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PanelApi - functional programming interface
 * @export
 */
export const PanelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PanelApiAxiosParamCreator(configuration)
    return {
        /**
         * Get panel Config
         * @summary Get panel Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panelGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanelConfigResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panelGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PanelApi.panelGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Admin and Staff users login with Google captcha(captcha site key required in get config api)
         * @summary Admin and Staff users login
         * @param {PanelLogin} request setup config data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panelLoginPost(request: PanelLogin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanelUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panelLoginPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PanelApi.panelLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Setup panel with admin user, captcha and ocserv default group configs
         * @summary Setup panel with admin user
         * @param {PanelSetupData} request setup config data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async panelSetupPost(request: PanelSetupData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanelUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.panelSetupPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PanelApi.panelSetupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PanelApi - factory interface
 * @export
 */
export const PanelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PanelApiFp(configuration)
    return {
        /**
         * Get panel Config
         * @summary Get panel Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panelGet(options?: RawAxiosRequestConfig): AxiosPromise<PanelConfigResponse> {
            return localVarFp.panelGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Admin and Staff users login with Google captcha(captcha site key required in get config api)
         * @summary Admin and Staff users login
         * @param {PanelApiPanelLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panelLoginPost(requestParameters: PanelApiPanelLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PanelUserResponse> {
            return localVarFp.panelLoginPost(requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Setup panel with admin user, captcha and ocserv default group configs
         * @summary Setup panel with admin user
         * @param {PanelApiPanelSetupPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        panelSetupPost(requestParameters: PanelApiPanelSetupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PanelUserResponse> {
            return localVarFp.panelSetupPost(requestParameters.request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for panelLoginPost operation in PanelApi.
 * @export
 * @interface PanelApiPanelLoginPostRequest
 */
export interface PanelApiPanelLoginPostRequest {
    /**
     * setup config data
     * @type {PanelLogin}
     * @memberof PanelApiPanelLoginPost
     */
    readonly request: PanelLogin
}

/**
 * Request parameters for panelSetupPost operation in PanelApi.
 * @export
 * @interface PanelApiPanelSetupPostRequest
 */
export interface PanelApiPanelSetupPostRequest {
    /**
     * setup config data
     * @type {PanelSetupData}
     * @memberof PanelApiPanelSetupPost
     */
    readonly request: PanelSetupData
}

/**
 * PanelApi - object-oriented interface
 * @export
 * @class PanelApi
 * @extends {BaseAPI}
 */
export class PanelApi extends BaseAPI {
    /**
     * Get panel Config
     * @summary Get panel Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PanelApi
     */
    public panelGet(options?: RawAxiosRequestConfig) {
        return PanelApiFp(this.configuration).panelGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Admin and Staff users login with Google captcha(captcha site key required in get config api)
     * @summary Admin and Staff users login
     * @param {PanelApiPanelLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PanelApi
     */
    public panelLoginPost(requestParameters: PanelApiPanelLoginPostRequest, options?: RawAxiosRequestConfig) {
        return PanelApiFp(this.configuration).panelLoginPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Setup panel with admin user, captcha and ocserv default group configs
     * @summary Setup panel with admin user
     * @param {PanelApiPanelSetupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PanelApi
     */
    public panelSetupPost(requestParameters: PanelApiPanelSetupPostRequest, options?: RawAxiosRequestConfig) {
        return PanelApiFp(this.configuration).panelSetupPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}

