/* tslint:disable */
/* eslint-disable */
/**
 * Ocserv User management Example Api
 * This is a sample Ocserv User management Api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MiddlewaresPermissionDenied } from '../models';
// @ts-ignore
import type { MiddlewaresUnauthorized } from '../models';
// @ts-ignore
import type { ModelsPermission } from '../models';
// @ts-ignore
import type { ModelsUser } from '../models';
// @ts-ignore
import type { RequestErrorResponse } from '../models';
// @ts-ignore
import type { UserChangePasswordData } from '../models';
// @ts-ignore
import type { UserChangeStaffPassword } from '../models';
// @ts-ignore
import type { UserCreateStaffData } from '../models';
// @ts-ignore
import type { UserStaffsResponse } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * User Change Password
         * @summary User Change Password
         * @param {string} authorization Bearer TOKEN
         * @param {UserChangePasswordData} request change user password data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPasswordPost: async (authorization: string, request: UserChangePasswordData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('userPasswordPost', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('userPasswordPost', 'request', request)
            const localVarPath = `/user/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user Profile
         * @summary Get user Profile
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileGet: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('userProfileGet', 'authorization', authorization)
            const localVarPath = `/user/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of Staffs
         * @summary List of Staffs
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [pageSize] Number of items per page
         * @param {string} [order] Field to order by
         * @param {UserStaffsGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStaffsGet: async (authorization: string, page?: number, pageSize?: number, order?: string, sort?: UserStaffsGetSortEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('userStaffsGet', 'authorization', authorization)
            const localVarPath = `/user/staffs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove Staff by given id
         * @summary Remove Staff
         * @param {number} id User ID
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStaffsIdDelete: async (id: number, authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userStaffsIdDelete', 'id', id)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('userStaffsIdDelete', 'authorization', authorization)
            const localVarPath = `/user/staffs/${id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change Staff Password by given id
         * @summary Change Staff Password
         * @param {number} id User ID
         * @param {string} authorization Bearer TOKEN
         * @param {UserChangeStaffPassword} request user new password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStaffsIdPasswordPost: async (id: number, authorization: string, request: UserChangeStaffPassword, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userStaffsIdPasswordPost', 'id', id)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('userStaffsIdPasswordPost', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('userStaffsIdPasswordPost', 'request', request)
            const localVarPath = `/user/staffs/{id}/password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Staff Permission by given id
         * @summary Update Staff Permission
         * @param {number} id User ID
         * @param {string} authorization Bearer TOKEN
         * @param {ModelsPermission} request user permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStaffsPermissionsIdPut: async (id: number, authorization: string, request: ModelsPermission, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userStaffsPermissionsIdPut', 'id', id)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('userStaffsPermissionsIdPut', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('userStaffsPermissionsIdPut', 'request', request)
            const localVarPath = `/user/staffs/permissions/${id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Admin or Staff
         * @summary Create Admin or Staff
         * @param {string} authorization Bearer TOKEN
         * @param {UserCreateStaffData} request user create data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStaffsPost: async (authorization: string, request: UserCreateStaffData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('userStaffsPost', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('userStaffsPost', 'request', request)
            const localVarPath = `/user/staffs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * User Change Password
         * @summary User Change Password
         * @param {string} authorization Bearer TOKEN
         * @param {UserChangePasswordData} request change user password data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPasswordPost(authorization: string, request: UserChangePasswordData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userPasswordPost(authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user Profile
         * @summary Get user Profile
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProfileGet(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProfileGet(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userProfileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of Staffs
         * @summary List of Staffs
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [pageSize] Number of items per page
         * @param {string} [order] Field to order by
         * @param {UserStaffsGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStaffsGet(authorization: string, page?: number, pageSize?: number, order?: string, sort?: UserStaffsGetSortEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStaffsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStaffsGet(authorization, page, pageSize, order, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userStaffsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove Staff by given id
         * @summary Remove Staff
         * @param {number} id User ID
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStaffsIdDelete(id: number, authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStaffsIdDelete(id, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userStaffsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change Staff Password by given id
         * @summary Change Staff Password
         * @param {number} id User ID
         * @param {string} authorization Bearer TOKEN
         * @param {UserChangeStaffPassword} request user new password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStaffsIdPasswordPost(id: number, authorization: string, request: UserChangeStaffPassword, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStaffsIdPasswordPost(id, authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userStaffsIdPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Staff Permission by given id
         * @summary Update Staff Permission
         * @param {number} id User ID
         * @param {string} authorization Bearer TOKEN
         * @param {ModelsPermission} request user permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStaffsPermissionsIdPut(id: number, authorization: string, request: ModelsPermission, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStaffsPermissionsIdPut(id, authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userStaffsPermissionsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create Admin or Staff
         * @summary Create Admin or Staff
         * @param {string} authorization Bearer TOKEN
         * @param {UserCreateStaffData} request user create data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userStaffsPost(authorization: string, request: UserCreateStaffData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userStaffsPost(authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userStaffsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * User Change Password
         * @summary User Change Password
         * @param {UserApiUserPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPasswordPost(requestParameters: UserApiUserPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userPasswordPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user Profile
         * @summary Get user Profile
         * @param {UserApiUserProfileGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProfileGet(requestParameters: UserApiUserProfileGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsUser> {
            return localVarFp.userProfileGet(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * List of Staffs
         * @summary List of Staffs
         * @param {UserApiUserStaffsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStaffsGet(requestParameters: UserApiUserStaffsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserStaffsResponse> {
            return localVarFp.userStaffsGet(requestParameters.authorization, requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove Staff by given id
         * @summary Remove Staff
         * @param {UserApiUserStaffsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStaffsIdDelete(requestParameters: UserApiUserStaffsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userStaffsIdDelete(requestParameters.id, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Change Staff Password by given id
         * @summary Change Staff Password
         * @param {UserApiUserStaffsIdPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStaffsIdPasswordPost(requestParameters: UserApiUserStaffsIdPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userStaffsIdPasswordPost(requestParameters.id, requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Staff Permission by given id
         * @summary Update Staff Permission
         * @param {UserApiUserStaffsPermissionsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStaffsPermissionsIdPut(requestParameters: UserApiUserStaffsPermissionsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userStaffsPermissionsIdPut(requestParameters.id, requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Admin or Staff
         * @summary Create Admin or Staff
         * @param {UserApiUserStaffsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userStaffsPost(requestParameters: UserApiUserStaffsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsUser> {
            return localVarFp.userStaffsPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userPasswordPost operation in UserApi.
 * @export
 * @interface UserApiUserPasswordPostRequest
 */
export interface UserApiUserPasswordPostRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof UserApiUserPasswordPost
     */
    readonly authorization: string

    /**
     * change user password data
     * @type {UserChangePasswordData}
     * @memberof UserApiUserPasswordPost
     */
    readonly request: UserChangePasswordData
}

/**
 * Request parameters for userProfileGet operation in UserApi.
 * @export
 * @interface UserApiUserProfileGetRequest
 */
export interface UserApiUserProfileGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof UserApiUserProfileGet
     */
    readonly authorization: string
}

/**
 * Request parameters for userStaffsGet operation in UserApi.
 * @export
 * @interface UserApiUserStaffsGetRequest
 */
export interface UserApiUserStaffsGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof UserApiUserStaffsGet
     */
    readonly authorization: string

    /**
     * Page number, starting from 1
     * @type {number}
     * @memberof UserApiUserStaffsGet
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof UserApiUserStaffsGet
     */
    readonly pageSize?: number

    /**
     * Field to order by
     * @type {string}
     * @memberof UserApiUserStaffsGet
     */
    readonly order?: string

    /**
     * Sort order, either ASC or DESC
     * @type {'ASC' | 'DESC'}
     * @memberof UserApiUserStaffsGet
     */
    readonly sort?: UserStaffsGetSortEnum
}

/**
 * Request parameters for userStaffsIdDelete operation in UserApi.
 * @export
 * @interface UserApiUserStaffsIdDeleteRequest
 */
export interface UserApiUserStaffsIdDeleteRequest {
    /**
     * User ID
     * @type {number}
     * @memberof UserApiUserStaffsIdDelete
     */
    readonly id: number

    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof UserApiUserStaffsIdDelete
     */
    readonly authorization: string
}

/**
 * Request parameters for userStaffsIdPasswordPost operation in UserApi.
 * @export
 * @interface UserApiUserStaffsIdPasswordPostRequest
 */
export interface UserApiUserStaffsIdPasswordPostRequest {
    /**
     * User ID
     * @type {number}
     * @memberof UserApiUserStaffsIdPasswordPost
     */
    readonly id: number

    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof UserApiUserStaffsIdPasswordPost
     */
    readonly authorization: string

    /**
     * user new password
     * @type {UserChangeStaffPassword}
     * @memberof UserApiUserStaffsIdPasswordPost
     */
    readonly request: UserChangeStaffPassword
}

/**
 * Request parameters for userStaffsPermissionsIdPut operation in UserApi.
 * @export
 * @interface UserApiUserStaffsPermissionsIdPutRequest
 */
export interface UserApiUserStaffsPermissionsIdPutRequest {
    /**
     * User ID
     * @type {number}
     * @memberof UserApiUserStaffsPermissionsIdPut
     */
    readonly id: number

    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof UserApiUserStaffsPermissionsIdPut
     */
    readonly authorization: string

    /**
     * user permission
     * @type {ModelsPermission}
     * @memberof UserApiUserStaffsPermissionsIdPut
     */
    readonly request: ModelsPermission
}

/**
 * Request parameters for userStaffsPost operation in UserApi.
 * @export
 * @interface UserApiUserStaffsPostRequest
 */
export interface UserApiUserStaffsPostRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof UserApiUserStaffsPost
     */
    readonly authorization: string

    /**
     * user create data
     * @type {UserCreateStaffData}
     * @memberof UserApiUserStaffsPost
     */
    readonly request: UserCreateStaffData
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * User Change Password
     * @summary User Change Password
     * @param {UserApiUserPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userPasswordPost(requestParameters: UserApiUserPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userPasswordPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user Profile
     * @summary Get user Profile
     * @param {UserApiUserProfileGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userProfileGet(requestParameters: UserApiUserProfileGetRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userProfileGet(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of Staffs
     * @summary List of Staffs
     * @param {UserApiUserStaffsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userStaffsGet(requestParameters: UserApiUserStaffsGetRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userStaffsGet(requestParameters.authorization, requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove Staff by given id
     * @summary Remove Staff
     * @param {UserApiUserStaffsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userStaffsIdDelete(requestParameters: UserApiUserStaffsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userStaffsIdDelete(requestParameters.id, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change Staff Password by given id
     * @summary Change Staff Password
     * @param {UserApiUserStaffsIdPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userStaffsIdPasswordPost(requestParameters: UserApiUserStaffsIdPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userStaffsIdPasswordPost(requestParameters.id, requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Staff Permission by given id
     * @summary Update Staff Permission
     * @param {UserApiUserStaffsPermissionsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userStaffsPermissionsIdPut(requestParameters: UserApiUserStaffsPermissionsIdPutRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userStaffsPermissionsIdPut(requestParameters.id, requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Admin or Staff
     * @summary Create Admin or Staff
     * @param {UserApiUserStaffsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userStaffsPost(requestParameters: UserApiUserStaffsPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userStaffsPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UserStaffsGetSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type UserStaffsGetSortEnum = typeof UserStaffsGetSortEnum[keyof typeof UserStaffsGetSortEnum];
